---
title: "Homework: Murder in SQL City"
execute:
  error: true
author: "Alisha Schaefer and Kaitlyn Steck"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = F)
options(digits = 3)

library(tidyverse)
```

## Instructions
Northwestern University's Knight lab created a SQL murder mystery to help users sharpen their database skills by solving the crime that happened at SQL city. There are tables with different pieces of information - social media checkins, people, drivers licenses, crime scene reports, police interviews, and more. 

Pick R or Python, and solve the murder mystery, showing **all of your work in this document**. 

Your solution must be reproducible -- that is, you should use dplyr verbs, table joins, etc. to solve the mystery, rather than just looking through the tables yourselves.

You may work in groups of 2-4 people on this assignment. Each person should turn in their own assignment, but should list their group members as authors.

Make sure you do your due diligence! You should double check your answer and print out the guilty party's interview from the database.

When you are finished with the assignment: 

- Once you have finished this assignment, render the document (Ctrl/Cmd-Shift-K or the Render button). 
- Commit the qmd file and any other files you have changed to the repository and push your changes.
- In Canvas, submit a link to your github repository containing the updated files.
- Provide the name of the guilty party in the text input field on Canvas, and make sure all of your work is on GitHub to receive full credit.

The chunks below use the code to read in each of the 8 tables of data for this assignment.

Hints:

- You can use a lot of filter statements, but it will in many cases be easier to use joins. 
- See if you can write code that doesn't require you to type out knowledge gained from a previous clue (e.g. pipe your results from one query into the next)


***

A crime has taken place and the detective needs your help. The detective gave you the crime scene report, but you somehow lost it. You vaguely remember that the crime was a murder that occurred sometime on January 15, 2018 and that it took place in SQL City. All the clues to this mystery are buried in a huge database, and you need to use R and SAS to navigate through this network of information. Your first step to solving the mystery is to retrieve the corresponding crime scene report from the police department's database. 

This database schema may help you figure out how to navigate the database:

![sql-murder-mystery database schema diagram](https://github.com/NUKnightLab/sql-mysteries/blob/master/schema.png?raw=true)

## R
```{r db-setup-r}
library(RSQLite)
library(DBI)
library(dplyr)
# Your database connection code goes here. Store the connection as con 
con <- dbConnect(RSQLite::SQLite(), "sql-murder-mystery.db")

table_names <- c("crime_scene_report", 
                 "drivers_license", 
                 "facebook_event_checkin",
                 "get_fit_now_check_in", 
                 "get_fit_now_member", 
                 "income", 
                 "interview",
                 "person")

# For each table name, read the tables in and store them as the name of the table
purrr::walk(table_names, function(x) {
  assign(x, dbReadTable(con, x), envir = .GlobalEnv)
})

# close the connection when you're done
dbDisconnect(con)

##filtering day, type, and city
day_of_crime <- crime_scene_report %>%
  filter(date == "20180115",
     type == "murder",
     city == "SQL City")

day_of_crime$description

# [1] "Security footage shows that there were 2 witnesses. The first witness lives at the last house on \"Northwestern Dr\". The second witness, named Annabel, lives somewhere on \"Franklin Ave\"."

interview<-interview%>%
  mutate(id = person_id)

interview_people<- left_join(interview, person)

interview_street <- interview_people %>%
  filter(
    address_street_name == "Northwestern Dr",
    id == "14887"
  )

interview_name <- separate(interview_people, "name", c("first_name", "last_name"), sep = " ")

interview_name <- interview_name %>%
  filter(
    first_name == "Annabel" 
  )
interview_name$name <-
  paste(interview_name$first_name, interview_name$last_name, sep = " ")

witness_transcripts <- full_join(interview_street, interview_name)
witness_transcripts$transcript

# [1] "I heard a gunshot and then saw a man run out. He had a \"Get Fit Now Gym\" bag. The membership number on the bag started with \"48Z\". Only gold members have those bags. The man got into a car with a plate that included \"H42W\"."
# [2] "I saw the murder happen, and I recognized the killer from my gym when I was working out last week on January the 9th."

suspect_membership <- get_fit_now_member %>% filter(str_starts(id, "48Z"))

potential_killers <- inner_join(person, killer_membership, by = c('id' = 'person_id'))

jan9_checkin <- get_fit_now_check_in %>% filter(check_in_date == '20180109')

jan9_suspect_at_gym <- inner_join(potential_killers, jan9_checkin, by = c('id.y' = 'membership_id')) #there are duplicates we can probably do this better in class

suspect_drivers_license <- inner_join(jan9_killer_at_gym, drivers_license, by = c('license_id' = 'id')) #we can also do this a lot better in class I was just nosey

## look at 20180115 in facebook events
event_info <- left_join(day_of_crime, facebook_event_checkin, by = c('date' = 'date'))

suspect_facebook_event <- inner_join(killer_drivers_license, event_info, by = c('id' = 'person_id'))

suspect_interview <- interview %>% filter(person_id == '67318')
suspect_interview$transcript
#"I was hired by a woman with a lot of money. I don't know her name but I know she's around 5'5\" (65\") or 5'7\" (67\"). She has red hair and she drives a Tesla Model S. I know that she attended the SQL Symphony Concert 3 times in December 2017.\n"


#either went to the facebook event before or after the murder to create an alibi

```



## Python

```{python table-setup-py}
import pandas as pd
import sqlite3

# Read sqlite query results into a pandas DataFrame
con = sqlite3.connect("sql-murder-mystery.db")

crime_scene_report = pd.read_sql_query("SELECT * from crime_scene_report", con)
drivers_license = pd.read_sql_query("SELECT * from drivers_license", con)
facebook_event_checkin = pd.read_sql_query("SELECT * from facebook_event_checkin", con)
get_fit_now_check_in = pd.read_sql_query("SELECT * from get_fit_now_check_in", con)
get_fit_now_member = pd.read_sql_query("SELECT * from get_fit_now_member", con)
income = pd.read_sql_query("SELECT * from income", con)
interview = pd.read_sql_query("SELECT * from interview", con)
person = pd.read_sql_query("SELECT * from person", con)

# Verify that result of SQL query is stored in the dataframe
print(crime_scene_report.head())

con.close()

#looking into the day, type of murder and the city 

day_of_crime = crime_scene_report.filter[(crime_scene_report['date']=='20180115'), ]

```
